ERA APP CODE NOTES
===================

High-level Architecture
- SwiftUI app (`eraApp`) launches `ContentView` with a single `NavigationStack`.
- Navigation is driven by an enum `AppRoute`; onboarding pushes a single destination: `PhotoAnalyzerView` once the quiz completes.
- Visual identity is centralized in `DesignSystem/EraDesignSystem.swift` (colors, background, cards, buttons, typography helpers).
- Domain models live under `Models/` (archetypes, quiz questions, results) with lightweight service logic in `Services/VibeAnalyzer.swift`.

Onboarding Flow
- `OnboardingViewModel` (MainActor ObservableObject) owns quiz state: current screen index, selected answers, calculated archetypes, and a `finished` flag.
- Screens are defined by `OnboardingScreen` which wraps a `Content` enum (`hero`, `checklist`, `question`, `summary`). Each screen tracks its progress index and total steps for the header progress bar.
- `OnboardingFlowBuilder.makeScreens` pulls question data from `OnboardingQuestionBank`, prepends hero/checklist screens, and appends the summary screen.
- `OnboardingFlowView` reads the current `OnboardingScreen` from the view model and renders the matching SwiftUI screen component with spring transitions.
  - `OnboardingHeroScreen` and `OnboardingChecklistScreen` advance when their CTA button is pressed.
  - `OnboardingQuestionScreen` shows selectable answer cards; choosing an answer records the index and auto-advances.
  - `OnboardingSummaryScreen` fires `vm.completeOnboarding()`, which calculates archetype results and flips the `finished` flag.
- Progress header (`OnboardingProgressHeader`) renders a progress bar, step label, and screen title/subtitle.

Quiz + Archetype Logic
- `Models/QuizModels.swift` defines `QuizQuestion`, `QuizAnswer`, and a `QuizScorecard` helper for aggregating archetype weights.
- `Models/OnboardingQuestions.swift` contains the question bank for the `.vibeDiscovery` set; each answer carries hidden archetype weights.
- `OnboardingViewModel.calculateResults()` multiplies saved answers through a `QuizScorecard`, then picks a primary and secondary archetype if present.
- `VibeResult` wraps the chosen archetypes plus a short description and summary text helper.
- `Services/VibeAnalyzer.analyze` can also convert an explicit score dictionary into a `VibeResult` (currently unused but aligns with the data model).

Post-Onboarding Experience
- When onboarding finishes, `ContentView` builds a `VibeResult` via `vm.makeVibeResult()` and pushes `AppRoute.photoAnalyzer` onto the navigation stack.
- The navigation bar back button is hidden on `PhotoAnalyzerView` to keep users in the post-onboarding flow.
- `PhotoAnalyzerView` shows the vibe summary card, lets users pick up to 12 photos via `PhotosPicker`, and runs a local AI stub:
  - Selected images populate `uiImages`; `analyzePhotos()` simulates async AI selection and fills `aiChosen`.
  - Users can re-run with the secondary button or save the vibe board (function stub).

Design System Building Blocks
- `EraPalette` centralizes colors and opacity adjustments.
- `EraBackground` stacks radial gradients/circles for the app backdrop.
- `EraSurfaceCard`, `EraPrimaryButtonStyle`, `EraSecondaryButtonStyle`, and `EraSelectableCard` define reusable layout and interaction treatments.
- `EraSectionHeader`, `EraTopBar`, `EraBadge`, and `VibeSummaryCard` cover typography and content blocks used across screens.

Extending the App
- To add or change questions: edit `Models/OnboardingQuestions.swift` and ensure each `QuizAnswer` has appropriate archetype weights.
- To support multiple quizzes: extend `OnboardingQuestionSet`, branch in `OnboardingQuestionBank.questions`, and update `OnboardingViewModel.init` defaults/UI picker if needed.
- To change onboarding steps: tweak `OnboardingFlowBuilder.makeScreens` or create new SwiftUI screen components under `Flows/Onboarding/components`.
- To hook up real AI/photo selection: replace the stub logic in `PhotoAnalyzerView.analyzePhotos()` (or move it into `AnalyzeViewModel`) with your API calls, then update the UI when responses arrive.
- `AnalyzeViewModel` already contains a placeholder async workflow for batch analysis; integrate it with OpenAI or custom backend and move state ownership out of the view if desired.
- For navigation beyond the vibe lab, add new routes to `AppRoute`, update `navigationDestination`, and push onto `path` as needed.

Next Ideas / TODOs
- Persist quiz answers and vibe results so users can revisit without re-onboarding (`AppStorage` or local database).
- Wire `PhotoAnalyzerView` to `AnalyzeViewModel` and share loading/error state.
- Implement a save action for `finalizeBoard()` (e.g., export collage, write to disk, or sync to backend).
- Add tests in `neraTests` for `OnboardingViewModel` result calculations and question flow.
- Consider theming support (light/dark adjustments) and localization for text.

Quick File Map
- `eraApp.swift`: entry point.
- `Views/ContentView.swift`: root navigation + route handling.
- `Views/OnboardingQuestionView.swift`: wraps the onboarding flow view.
- `ViewModels/OnboardingViewModel.swift`: quiz engine + navigation state.
- `Flows/Onboarding/components/*`: SwiftUI screens for each onboarding stage.
- `Models/*`: archetypes, quiz data, results.
- `DesignSystem/EraDesignSystem.swift`: colors, typography, reusable UI parts.
- `Views/PhotoAnalyzerView.swift`: post-onboarding experience (photo picker + AI stub).
- `ViewModels/AnalyzeViewModel.swift`: placeholder AI analysis view model.
- `Services/VibeAnalyzer.swift`: helper for score -> archetype mapping.

