# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Project Overview

This is an iOS app called "on brand" - an AI-powered style and photo analysis app with Instagram-style UI components. The app uses SwiftUI with MVVM architecture and includes comprehensive Firebase backend integration.

## Key Features
- **Authentication**: Apple Sign-In integration
- **Onboarding**: 18-screen comprehensive flow with personality quiz
- **Photo Analysis**: AI-powered image curation and vibe matching
- **Profile Management**: Instagram-style profile view
- **Creator Requirements**: Influencer deal tracking system
- **Developer Tools**: Comprehensive debugging and testing tools

## Architecture
- **Pattern**: MVVM with SwiftUI
- **Backend**: Firebase (Auth, Firestore, Storage, Analytics, Crashlytics)
- **AI Services**: OpenAI integration for photo analysis
- **Design System**: Comprehensive theming with ThemeManager

# Tools

## Devintest AI Development Tools

The project includes advanced AI development tools in the `devintest/` directory that can significantly enhance your iOS development workflow:

### Available Tools
1. **LLM API** (`devintest/tools/llm_api.py`): Multi-provider AI integration
2. **Web Scraper** (`devintest/tools/web_scraper.py`): Advanced web content extraction
3. **Search Engine** (`devintest/tools/search_engine.py`): DuckDuckGo search integration
4. **Screenshot Utils** (`devintest/tools/screenshot_utils.py`): Web page screenshot capture

### Usage Examples

#### AI-Powered Code Analysis
```bash
# Analyze SwiftUI code with AI
venv/bin/python3 devintest/tools/llm_api.py --prompt "Review this SwiftUI view for best practices" --provider "anthropic"
```

#### Competitor Research
```bash
# Research competitor apps
venv/bin/python3 devintest/tools/web_scraper.py --max-concurrent 3 https://competitor1.com https://competitor2.com
venv/bin/python3 devintest/tools/llm_api.py --prompt "Analyze these competitor features" --provider "openai"
```

#### UI Verification
```bash
# Capture and analyze app screenshots
venv/bin/python3 devintest/tools/screenshot_utils.py https://your-app.com screenshot.png
venv/bin/python3 devintest/tools/llm_api.py --prompt "Analyze this UI design" --image screenshot.png --provider "openai"
```

#### Technical Research
```bash
# Search for technical solutions
venv/bin/python3 devintest/tools/search_engine.py "SwiftUI Firebase integration best practices"
```

### Integration with iOS Development
- **Feature Testing**: Test AI features with real API calls
- **UI Validation**: Verify designs with screenshot analysis
- **Code Review**: Use AI to review SwiftUI implementations
- **Research**: Gather technical information and best practices
- **Competitor Analysis**: Research market trends and features

## Python Environment

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

You have a python venv in `./venv`. Always use (activate) it when doing python development:
```bash
source venv/bin/activate
```

# Documentation

All project documentation is located in the `docs/` directory:

- **Project Structure**: `docs/project-structure.mdc`
- **SwiftUI Standards**: `docs/swiftui-standards.mdc`
- **Theming & Design System**: `docs/theming-design-system.mdc`
- **Feature Development**: `docs/feature-development.mdc`
- **Testing & Debugging**: `docs/testing-debugging.mdc`
- **AI Services**: `docs/ai-services.mdc`
- **Devintest Usage Guide**: `docs/DEVINTEST_USAGE_GUIDE.md`

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Always track changes with git

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information

# Scratchpad

## Current Task: File Structure Optimization for Devin Integration

**Objective**: Reorganize project file structure to ensure proper Devin integration and optimal cursor rules usage.

**Approach**: 
- Consolidate documentation in `docs/` directory
- Streamline `.cursorrules` file for better Devin processing
- Ensure all file references are updated
- Test Devin integration with new structure

**File Structure Plan**:
[ ] Phase 1: Directory Structure
  [X] Create `docs/` directory for all documentation
  [X] Move all `.mdc` files to `docs/`
  [X] Move `DEVINTEST_USAGE_GUIDE.md` to `docs/`

[ ] Phase 2: Cursor Rules Optimization
  [X] Create streamlined `.cursorrules` file
  [X] Focus on essential information for Devin
  [X] Reference documentation in `docs/` directory

[ ] Phase 3: File Reference Updates
  [ ] Update all file references to point to new locations
  [ ] Verify all documentation links work correctly
  [ ] Test Devin integration with new structure

**Current Status**: Phase 2 Complete - Streamlined cursor rules created

## Phase 1: Directory Structure - COMPLETED âœ…

### âœ… Documentation Organization
**Successfully reorganized project documentation** for optimal Devin integration:

#### Directory Structure Created âœ…
1. **`docs/` Directory**: Centralized location for all documentation
   - **Purpose**: Single location for all project documentation
   - **Benefits**: Easier for Devin to find and reference documentation
   - **Organization**: Clean separation from code and tools

2. **Documentation Files Moved**:
   - `ai-services.mdc` â†’ `docs/ai-services.mdc`
   - `feature-development.mdc` â†’ `docs/feature-development.mdc`
   - `project-structure.mdc` â†’ `docs/project-structure.mdc`
   - `swiftui-standards.mdc` â†’ `docs/swiftui-standards.mdc`
   - `testing-debugging.mdc` â†’ `docs/testing-debugging.mdc`
   - `theming-design-system.mdc` â†’ `docs/theming-design-system.mdc`
   - `DEVINTEST_USAGE_GUIDE.md` â†’ `docs/DEVINTEST_USAGE_GUIDE.md`

#### Benefits of New Structure âœ…
- **Devin Integration**: All documentation in one place for easy access
- **Clean Root Directory**: Reduced clutter in main project directory
- **Logical Organization**: Documentation separated from code and tools
- **Scalability**: Easy to add more documentation as project grows

**Status**: Phase 1 Complete - Documentation properly organized!

## Phase 2: Cursor Rules Optimization - COMPLETED âœ…

### âœ… Streamlined Cursor Rules for Devin
**Successfully created optimized `.cursorrules` file** for better Devin processing:

#### Key Improvements âœ…
1. **Focused Content**: Removed redundant information, kept essential details
2. **Clear Structure**: Logical organization with clear sections
3. **Devin-Friendly**: Optimized for AI processing and understanding
4. **Documentation References**: Clear pointers to `docs/` directory

#### Content Organization âœ…
- **Project Overview**: Clear description of the iOS app and its features
- **Architecture**: Key technical details (MVVM, Firebase, SwiftUI)
- **Tools Section**: Comprehensive devintest tools documentation
- **Documentation Section**: Clear references to all documentation files
- **Lessons**: Preserved important learned lessons
- **Scratchpad**: Current task tracking and progress

#### Devin Integration Benefits âœ…
- **Faster Processing**: Shorter, more focused file
- **Clear Context**: Better understanding of project structure
- **Easy Navigation**: Clear references to documentation
- **Tool Integration**: Comprehensive devintest tools documentation

**Status**: Phase 2 Complete - Optimized cursor rules for Devin!

## Phase 3: File Reference Updates - IN PROGRESS ðŸ”„

### ðŸŽ¯ Next Steps
[ ] Update all file references to point to new locations
[ ] Verify all documentation links work correctly
[ ] Test Devin integration with new structure

**Current Status**: Ready to proceed with Phase 3
